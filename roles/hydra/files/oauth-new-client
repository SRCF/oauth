#!/usr/bin/env python3
from typing import List, Callable
from srcf.database import queries
from hydra_session import session

def input_validate(s: str, f: Callable[[str], bool]) -> str:
    res = input(s + ": ")
    while not f(res):
        res = input(s + ": ")

    return res

def input_any(s: str) -> str:
    return input(s + ": ")

def input_nonempty(s: str) -> str:
    return input_validate(s, lambda x: x != "")

def input_in(s: str, allowed: List[str]) -> str:
    return input_validate(s, lambda x: x in allowed)

def is_member_or_soc(s: str) -> bool:
    try:
        queries.get_member_or_society(s)
        return True
    except KeyError:
        return False

client : dict = {}

client["client_name"] = input_nonempty("Client name")
ALLOWED_AUTH_METHODS = ["client_secret_post", "client_secret_basic", "private_key_jwt", "none"]
client["token_endpoint_auth_method"] = input_in("Auth method ({})".format(", ".join(ALLOWED_AUTH_METHODS)), ALLOWED_AUTH_METHODS)

if client["token_endpoint_auth_method"] == "private_key_jwt":
    client["jwks_uri"] = input_nonempty("JWK uri")

logo_uri = input("Logo URI: ")
if logo_uri:
    client["logo_uri"] = logo_uri

client["scope"] = input("Scopes (space separated): ")
client["redirect_uris"] = input_nonempty("Callback URIs (space separated)").split(" ")

client["owner"] = input_validate("Client owner (srcf user or soc)", is_member_or_soc)
client["metadata"] = { "internal": False }

response = session.post("/clients", json=client).json()

print(f'Client id: {response["client_id"]}\nClient secret: {response["client_secret"]}')
